---
- name: Ansible playbook to prepare node as K8s master
  hosts: localhost
  become: yes
  gather_facts: true
  vars:
    node_name: more-master
    k8s_ver: 1.27.*
    containerd_ver: 1.7.0
    calico_ver: 3.26.1
    tmp_dir: /data/1/k8s/tmp
    containerd_bin_path: /usr/local/bin
    containerd_config_dir: /etc/containerd
    k8s_keyring_dir: /etc/apt/keyrings

  tasks:

    - name: Running cleanup from previous runs
      file:
        state: absent
        path: "{{ item }}"
      loop:
        - "{{ tmp_dir }}"
        - "{{ containerd_config_dir }}"
        - "{{ k8s_keyring_dir }}"

    - name: Create directories to store cluster setup files
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ tmp_dir }}"
        - "{{ containerd_config_dir }}"
        - "{{ k8s_keyring_dir }}"

    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        - nfs-common

    - name: Load Kernel modules & settings
      shell: |
        modprobe overlay
        modprobe br_netfilter
        cat << EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
        cat << EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
        sysctl --system
        lsmod | grep br_netfilter
        lsmod | grep overlay
      register: command_output
    
    - debug:
        var: command_output.stdout_lines

    - name: "Download Container Runtime (containerd.io {{ containerd_ver }}) for Kubernetes"
      unarchive:
        src: https://github.com/containerd/containerd/releases/download/v{{ containerd_ver }}/containerd-{{ containerd_ver }}-linux-amd64.tar.gz
        dest: "{{ containerd_bin_path }}"
        extra_opts: [--strip-components=1]
        remote_src: yes

    - name: Download containerd service file
      get_url:
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /etc/systemd/system/containerd.service

    - name: Create configs for containerd
      shell: containerd config default | sudo tee /etc/containerd/config.toml

    - name: Ensure SystemdCgroup is set to true in containered config.toml
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        line: '            SystemdCgroup = true'
        backrefs: yes

    - name: "Starting containerd runtime (containerd.io {{ containerd_ver }})"
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes

    - name: Download runc
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64
        dest: "{{ tmp_dir }}"

    - name: Install runc for containers
      command: install -m 755 "{{ tmp_dir }}"/runc.amd64 /usr/local/sbin/runc

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
        filename: kubernetes
        state: present

    - name: Install Kubernetes binaries
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet={{ k8s_ver }}
          - kubeadm={{ k8s_ver }}
          - kubectl={{ k8s_ver }}

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init  --node-name "{{ node_name }}" --pod-network-cidr=192.168.0.0/16 
      register: kubeadm_output
    
    - debug:
        var: kubeadm_output.stdout_lines

    - name: Create kube working directory for the current user
      file:
        path: "{{ lookup('env','HOME') }}//.kube"
        state: directory
  
    - name: Assign read permission to the kube config file
      file:
        path: /etc/kubernetes/admin.conf
        mode: o+r

    - name: "Copy kube conf file to the working directory: {{ lookup('env','HOME') }}/.kube"
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ lookup('env','HOME') }}//.kube/config"
        owner: "{{ lookup('env','USER') }}"
        group: "{{ lookup('env','USER') }}"
        # mode: go-r

    - name: "Install calico pod network as user: {{ lookup('env','USER') }}"
      command: "{{ item }}" 
      become_user: "{{ lookup('env','USER') }}"
      loop:
        - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_ver }}/manifests/tigera-operator.yaml
        - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_ver }}/manifests/custom-resources.yaml
      register: pod_network_output
    
    - debug:
        var: pod_network_output.stdout_lines

    - name: Remove NoSchedule taint role in master
      become_user: "{{ lookup('env','USER') }}"
      command: kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-

    - name: Generate join command
      become_user: "{{ lookup('env','USER') }}"
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy the join command to server location
      copy: content="{{ join_command.stdout_lines[0] + '\n' }}" dest={{tmp_dir}}/join_command.sh mode=0777
