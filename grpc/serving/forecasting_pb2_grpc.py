# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import serving.forecasting_pb2 as forecasting__pb2


class RouteGuideStub(object):
    """option java_multiple_files = true;
    option java_package = "eu.more2020.visual.grpc";
    option java_outer_classname = "GrpcProto";

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartTraining = channel.unary_unary(
            "/RouteGuide/StartTraining",
            request_serializer=forecasting__pb2.TrainingInfo.SerializeToString,
            response_deserializer=forecasting__pb2.Status.FromString,
        )
        self.GetProgress = channel.unary_unary(
            "/RouteGuide/GetProgress",
            request_serializer=forecasting__pb2.JobID.SerializeToString,
            response_deserializer=forecasting__pb2.Progress.FromString,
        )
        self.GetSpecificTargetResults = channel.unary_unary(
            "/RouteGuide/GetSpecificTargetResults",
            request_serializer=forecasting__pb2.Target.SerializeToString,
            response_deserializer=forecasting__pb2.Results.FromString,
        )
        self.GetAllTargetsResults = channel.unary_unary(
            "/RouteGuide/GetAllTargetsResults",
            request_serializer=forecasting__pb2.JobID.SerializeToString,
            response_deserializer=forecasting__pb2.AllResults.FromString,
        )
        self.GetInference = channel.unary_unary(
            "/RouteGuide/GetInference",
            request_serializer=forecasting__pb2.Timestamp.SerializeToString,
            response_deserializer=forecasting__pb2.Inference.FromString,
        )
        self.SaveModel = channel.unary_unary(
            "/RouteGuide/SaveModel",
            request_serializer=forecasting__pb2.ModelInfo.SerializeToString,
            response_deserializer=forecasting__pb2.Status.FromString,
        )


class RouteGuideServicer(object):
    """option java_multiple_files = true;
    option java_package = "eu.more2020.visual.grpc";
    option java_outer_classname = "GrpcProto";

    """

    def StartTraining(self, request, context):
        """Start training a model
        Return: Start of training job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetProgress(self, request, context):
        """Get progress for a specific job
        Return: If the job is running, if it is done, or if it has not started yet
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetSpecificTargetResults(self, request, context):
        """Get results for a specific target of a job
        Return: Model evaluation metrics and predictions for the selected target
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetAllTargetsResults(self, request, context):
        """Get results for all targets of a job
        Return: Model evaluation metrics and predictions for all targets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetInference(self, request, context):
        """Get inference for a specific timestamp and model
        Return: Predictions for a specific timestamp
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SaveModel(self, request, context):
        """Save the desired model given the algorithm and the target
        Return: If information was saved successfully
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RouteGuideServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StartTraining": grpc.unary_unary_rpc_method_handler(
            servicer.StartTraining,
            request_deserializer=forecasting__pb2.TrainingInfo.FromString,
            response_serializer=forecasting__pb2.Status.SerializeToString,
        ),
        "GetProgress": grpc.unary_unary_rpc_method_handler(
            servicer.GetProgress,
            request_deserializer=forecasting__pb2.JobID.FromString,
            response_serializer=forecasting__pb2.Progress.SerializeToString,
        ),
        "GetSpecificTargetResults": grpc.unary_unary_rpc_method_handler(
            servicer.GetSpecificTargetResults,
            request_deserializer=forecasting__pb2.Target.FromString,
            response_serializer=forecasting__pb2.Results.SerializeToString,
        ),
        "GetAllTargetsResults": grpc.unary_unary_rpc_method_handler(
            servicer.GetAllTargetsResults,
            request_deserializer=forecasting__pb2.JobID.FromString,
            response_serializer=forecasting__pb2.AllResults.SerializeToString,
        ),
        "GetInference": grpc.unary_unary_rpc_method_handler(
            servicer.GetInference,
            request_deserializer=forecasting__pb2.Timestamp.FromString,
            response_serializer=forecasting__pb2.Inference.SerializeToString,
        ),
        "SaveModel": grpc.unary_unary_rpc_method_handler(
            servicer.SaveModel,
            request_deserializer=forecasting__pb2.ModelInfo.FromString,
            response_serializer=forecasting__pb2.Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "RouteGuide", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class RouteGuide(object):
    """option java_multiple_files = true;
    option java_package = "eu.more2020.visual.grpc";
    option java_outer_classname = "GrpcProto";

    """

    @staticmethod
    def StartTraining(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/RouteGuide/StartTraining",
            forecasting__pb2.TrainingInfo.SerializeToString,
            forecasting__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetProgress(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/RouteGuide/GetProgress",
            forecasting__pb2.JobID.SerializeToString,
            forecasting__pb2.Progress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetSpecificTargetResults(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/RouteGuide/GetSpecificTargetResults",
            forecasting__pb2.Target.SerializeToString,
            forecasting__pb2.Results.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetAllTargetsResults(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/RouteGuide/GetAllTargetsResults",
            forecasting__pb2.JobID.SerializeToString,
            forecasting__pb2.AllResults.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetInference(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/RouteGuide/GetInference",
            forecasting__pb2.Timestamp.SerializeToString,
            forecasting__pb2.Inference.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SaveModel(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/RouteGuide/SaveModel",
            forecasting__pb2.ModelInfo.SerializeToString,
            forecasting__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
